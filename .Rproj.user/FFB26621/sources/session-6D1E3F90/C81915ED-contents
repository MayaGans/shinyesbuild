---
output: github_document
---

# Step 1: Initialize Golem App

I generally do this by creating a new project and selecting Golem app

# Step 2: Set Title to div to be populated by JS

```
app_ui <- function(request) {
  tagList(
    # Leave this function for adding external resources
    golem_add_external_resources(),
    # Your application UI logic 
    fluidPage(
      h1(id="title")
    )
  )
}
```

# Step 3: Initalize NPM library 

```
npm init -y
```

This will create a package.json. You can kind of think of this as the JS version of a `DESCRIPTION` file

# Step 4 Add ESBuild

Add our bundler using: 

```
npm install esbuild
```

This will add `esbuild` as a dependency to our package, as well as a folder called `node_modules` that contains all the libraries we'll be adding. Think of this folder like a local `renv`. ADD THIS FOLDER TO YOUR GIT IGNORE OR PEOPLE WILL MAKE FUN OF YOU!!

# Step 5 

Add `src` folder with JavaScript files that we'll be bundling. Think of this kind of like an `R` folder in a package, but where we need to `source()` files so that they "know" about each other.

# Step 6 

Create JS file we want to actually use in Shiny called `index.js`. Set that as the file to be bundled and the output file to `out.js`. Make sure to put `out.js` inside `inst/app/www` as that is where golem tracks files. To do this we add the build script in our `package.json`

```
"scripts": {
    "build": "esbuild index.js --bundle --outfile=./inst/app/www/out.js",
  },
```

and run `npm run build` in order to create the `out.js` file

# Run the app and see your code in action!